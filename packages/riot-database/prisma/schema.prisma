// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tier {
  CHALLENGER
  GRANDMASTER
  MASTER
  DIAMOND
  EMERALD
  PLATINUM
  GOLD
  SILVER
  BRONZE
  IRON
}

enum Division {
  I
  II
  III
  IV
}

enum Region {
  BR1
  EUN1
  EUW1
  JP1
  KR
  LA1
  LA2
  ME1
  NA1
  OC1
  PH2
  RU
  SG2
  TH2
  TR1
  TW2
  VN2
}

model Summoner {
  id               String    @id @default(cuid())
  region           Region
  puuid            String    @unique
  tier             Tier
  rank             Division
  leaguePoints     Int
  rankUpdateTime   DateTime
  matchesFetchedAt DateTime?

  // If an account has been deleted it could error 400 on fetch.
  // We mark it as error to stop fetching it but don't delete it entirely
  matchFetchErrored Boolean @default(false)

  // composite index for collectMatchIds.ts main query
  @@index([matchesFetchedAt, rankUpdateTime, region])
}

model Match {
  id                    String    @id @default(cuid())
  matchId               String    @unique
  queueId               Int?
  region                Region
  averageTier           Tier
  averageDivision       Division
  gameVersionMajorPatch Int?
  gameVersionMinorPatch Int?
  gameDuration          Int?
  gameStartTimestamp    DateTime?

  // Processed contains matchData
  processed         Boolean @default(false)
  processingErrored Boolean @default(false)

  // Detailed teams data
  teams Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Whether the match has been exported to Azure storage
  exported Boolean @default(false)

  // processMatches.ts query: processed first (highest selectivity)
  @@index([processed, region, processingErrored])
  // extractToAzure.ts query: processed and exported first (highest selectivity)
  @@index([processed, exported, processingErrored])
}
